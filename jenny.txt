Jenny
RunBank:
Very neat code overall, not very difficult to read and understand given the notable documentation. That said, some of the variable names were a bit undescriptive in my opinion, like tID and acName. I mean, in the context of this code it’s fine and isn’t a problem at all really but if this was a bigger project and I ran into a variable like tID, I’d probably forget that meant taxID at some point, and it’s only two more letters to add that in. This is consistent throughout, with variables like swAmount and sdAmount. At a glance, I wouldn’t know what that is without referencing something else. But then again, I’m someone who prefers full words in variables as much as possible. 
Also, on line 40, that inputmismatchexception doesn’t seem to be used? Line 50 and 51 is how I’d normally use error catches, but it looks to me like it’s the same information twice, and where the inputmismatch is initialized kind of broke the flow of reading the code, since it felt disjointed a bit. It’d feel better at line 45 after that block of System statements, but that’s an arbitrary preference thing, English conventions don’t really matter for code, but it’s a bit nice for readability. 

Account: 
Why does this class have a balance? I don’t think it’s ever used in code, and from a logical standpoint, any calls to this class’s balance should be made to one of it’s subsidiaries instead. Credit card, checking, and savings covers pretty much everything, there shouldn’t be a reason for the account’s balance to be referenced. It makes more sense given that all of the above mentioned classes extend this one and use the same constructor, but that doesn’t mean it had to be given a balance in the first place. setBalance already exists, there could have been a call to that in all of the subsidiary classes. None of that really matters beyond semantics, the only line I feel is truly redundant is line 57 in RunBank where account is given a free hundred along with the other classes. 

For a good thing, line 98 in Account (last10deposits[numDeposits % 10] = amount;) and all the similar lines in the subsidiary classes is a very clever way to make that list of the last 10 deposits/charges whatever, making a list with ten slots and deciding where to slot things in by the total number’s remainder divided by ten feels very innovative especially outside of the context of hashmaps. 

Checking:
This was a class on inheritance so I completely understand, but as a standalone, this probably could have just referenced an existing account class. As I said earlier, account doesn’t need a balance, but the name and taxID could definitely just be referenced from the parent class without needing to be set here, especially given that they’re unused. 

CreditCard:
cardNumber didn’t need to be static, importing java.util.Random and using that to generate a seven digit number wouldn’t have added much time complexity at all given that it’s once per class creation. Also, the display() method uses a nested for loop for lines 60 to 67, and I don’t think that was necessary, given that putting a for loop inside another for loop greatly increases time complexity. It looks like this method would have been possible with only one for loop iterating over last10charges, with two conditionals checking if the value in last10charges is null and if the value at last10withdraws is 0. This isn’t functionally the same thing since this double for loop takes any charge name that’s not null and prints it with every non-zero value within last10withdraws, but this doesn’t seem to make logical sense. Each charge name should be at the same position as the associated value, given the still very smart implementation of these arrays, and additionally, each charge name seems like it should only be associated with a singular value. 

Savings:
This is the same thing as Checking with the variable names changed, so nothing new to write here.
